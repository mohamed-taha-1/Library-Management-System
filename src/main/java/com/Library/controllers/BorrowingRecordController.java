package com.Library.controllers;import com.Library.common.ValidationException;import com.Library.dtos.BorrowingRecordDTO;import com.Library.dtos.PatronDTO;import com.Library.service.BorrowingRecordService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import reactor.core.publisher.Mono;@RestControllerpublic class BorrowingRecordController {  private final BorrowingRecordService borrowingRecordService;  public BorrowingRecordController(@Autowired BorrowingRecordService borrowingRecordService){    this.borrowingRecordService= borrowingRecordService;  }  @PostMapping("borrow/{bookId}/patron/{patronId}")  public ResponseEntity<Mono<BorrowingRecordDTO>> saveEnigleBorrow(@PathVariable Long bookId, @PathVariable Long patronId , @RequestBody @Validated BorrowingRecordDTO borrowingRecordDTO) throws ValidationException {     return  ResponseEntity.ok( Mono.justOrEmpty(borrowingRecordService.saveSingleBorrow(borrowingRecordDTO , bookId , patronId)));  }  @PutMapping("return/{bookId}/patron/{patronId}")  public ResponseEntity<Mono<BorrowingRecordDTO>> editEingleBorrow(@PathVariable Long bookId, @PathVariable Long patronId , @RequestBody @Validated BorrowingRecordDTO borrowingRecordDTO) throws ValidationException {     return ResponseEntity.ok( Mono.justOrEmpty(borrowingRecordService.editSingleBorrowingRecord(borrowingRecordDTO , bookId , patronId)));  }}