package com.Library.controllers;import com.Library.common.ValidationException;import com.Library.dtos.PatronDTO;import com.Library.models.Patron;import com.Library.service.PatronService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;@RestController@RequestMapping("/patrons")public class PatronController {   private final PatronService patronService;   public PatronController(@Autowired PatronService patronService){     this.patronService = patronService;   }  @GetMapping("")  public ResponseEntity<Flux<PatronDTO>> findAllPatrons(){    return ResponseEntity.ok( patronService.findAllPatrons());  }  @GetMapping("/{id}")  public ResponseEntity<Mono<PatronDTO>> findOnePatron(@PathVariable("id") Long patronId) throws Exception {    return ResponseEntity.ok( Mono.justOrEmpty(patronService.findOnePatron(patronId)) );  }  @PostMapping("")  public ResponseEntity<Mono<PatronDTO>> saveSinglePatron(@RequestBody @Validated PatronDTO patronDTO) throws ValidationException {    return  ResponseEntity.ok( Mono.justOrEmpty(patronService.saveOnePatron(patronDTO)));  }  @PutMapping("/{id}")  public ResponseEntity<Mono<PatronDTO>> editSinlgePatron(@RequestBody @Validated PatronDTO patronDTO , @PathVariable("id") Long patronId) throws Exception {    return  ResponseEntity.ok( Mono.justOrEmpty(patronService.editSinglePatron(patronDTO,patronId)));  }  @DeleteMapping("/{id}")  public void deleteSinglePatron(@PathVariable("id") Long patronId) throws Exception {    patronService.deleteSinglePatron(patronId);  }}